#!/bin/bash

echo "ava30-microapp-:"
read appName

mkdir "ava30-microapp-$appName"
cd ava30-microapp-$appName
npm init -y
echo "instalando pacotes, isso pode demorar alguns minutos"
npm install express dotenv swagger-ui-express winston winston-sns express-http-context cors body-parser sinon chai 


echo 'module.exports = {
  semi: true,
  trailingComma: 'all',
  singleQuote: true,
  printWidth: 80,
  tabWidth: 2,
};' >> prettier.js

echo 'FROM node:12-alpine
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

 
COPY package.json .
 
RUN npm install --production && npm cache clean --force 
 
COPY . .
EXPOSE 3000
CMD ["npm","start"]' >> Dockerfile

echo 'trigger:
  - master
  - staging
  - development

resources:
  repositories:
    - repository: templates
      type: git
      name: ava30-pipeline-templates

variables:
- group: usuario variable group
steps:
   - template: quality.yaml@templates
   - template: build.yaml@templates
   - template: publish.yaml@templates' >> azure-pipelines.yml

echo 'registry=https://pkgs.dev.azure.com/kdop/_packaging/ava30/npm/registry/
salways-auth=true; 
' >> .npmrc

echo '# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
' >> .gitignore

echo 'module.exports = {
  env: {
    es6: true,
    node: true,
    jasmine: true
  },
  extends: [
    'prettier',
    'eslint:recommended',
    'google'
  ],
  parserOptions: {
    ecmaVersion: 2018,
  },
  rules: {
    semi: [2, 'always'],
    'space-before-function-paren': [2, 'never'],
    'require-atomic-updates': 'off'
  },
};' >> .eslint.js

echo 'root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
' >> .editorconfig

echo 'node_modules' >> .dockerignore

mkdir env
cd env
echo '#APP
APP_PORT=3000

#LOG SNS
SUBSCRIBER=647558390031
LEVEL=info
LOGGER_ARN=arn:aws:sns:us-east-1:647558390031:ava30-microapp-user-logs' >> .env

cd ..

mkdir config
cd config

echo "require('dotenv/config');

module.exports = {
  app: {
    PORT: process.env.APP_PORT,
  },
  logger: {
    susbcriber: process.env.SUBSCRIBER,
    topic_arn: process.env.LOGGER_ARN,
    level: process.env.LEVEL,
  },
};
" >> general.js

cd ..

mkdir docs
cd docs 
currentDate=`date`
echo 'Projeto criado em ' $currentDate >> release.txt
echo '#Você está contribuindo para o repositorio ava30-microapp-'$appName'
Nº da Estoria ou Tarefa do CA:
Dê uma breve explicação sobre o que foi feito nessa tarefa:

Com grandes poderes vem grandes responsabilidades, então:
-Antes de submeter esse PR, garanta que:

[] Seu codigo realize build sem erros
[] Suas alterações não afetam o funcionamento da aplicação
[] Está utilizando o styleguide do time {utilizando boas praticas de clean code}
[] Todos os testes estejam passando e com cobertura de pelo menos 80%
[] O lint não apresente erros
[] Você adicionou as informações necessarias no arquivo de release
' >> pull_request_template.md

mkdir v1
cd v1 
echo '{}' >> swaggerScheme.json

cd .. 
cd ..

mkdir src
cd src

mkdir constants
cd constants
echo "const levels = {
  INFO: 'info',
  ERROR: 'error',
};

module.exports = levels;
">> logLevels.js

cd ..

mkdir controllers 
cd controllers

echo "/**
 * @typedef {import('../services/LogService')} LogService
 * @typedef {import('../services/defaultService')} DefaultService
 *
 * @typedef {Object} Config
 */

/** Default Controller Class */
module.exports = class defaultController {
  /**
   *
   * @param {LogService} logger
   * @param {DefaultService} defaultService
   *
   */
  constructor(logger, defaultService) {
    this._loggerService = logger;
    this._logger = logger.logger();
    this._defaultService = defaultService;
  }
  /**
   *
   * @param {Object} req
   * @param {Object} res
   * @param {Object} next
   * @return {Array} retorna um Hello World
   */
  async getDefault(req, res, next) {
    try {
     
      return res.status(200).json('Hello World');
    } catch (e) {
      return next(this._createError(500, e));
    }
  }
};
">> defaultController.js

cd ..

mkdir services
cd services

echo "/**
 * @typedef {Object} Config
 */

/**
 * Default Service Class
 */
module.exports = class DefaultService {
  /**
   *
   * @param {Config} config
   */
  constructor(config) {
    this._config = config;
  }

  /**
   *
   * @return {Array} retorna um array vazio
   */
  async defaultFunction() {
    try {
      
      return [];
    } catch (e) {
      return new Error(e.message);
    }
  }
};
">> defaultService.js
echo "/**
 * Logger service class
 */
class LoggerService {
  /**
   * Log Service construtctor
   * @param {*} winston
   * @param {*} winstonSns
   * @param {*} config
   * @param {*} httpContext
   * @param {*} logLevels
   */
  constructor(winston, winstonSns, config, httpContext, logLevels) {
    this._winston = winston;
    this._winstonSns = winstonSns;
    this._config = config;
    this._httpContext = httpContext;
    this._logLevels = logLevels;
  }
  /**
 * @return {Object} logger
 */
  logger() {
    const options = {
      subscriber: this._config.logger.subscriber,
      topic_arn: this._config.logger.topic_arn,
      level: this._config.logger.level,
      json: true,
      message: '%m',
    };

    const snsTransport = new this._winstonSns(options);

    const logger = this._winston.createLogger({
      format: this._winston.format.combine(
          this._winston.format.timestamp(),
          this._winston.format.json(),
      ),
      defaultMeta: {
        service: 'ava30-microapp-$appName',
        description: '',
      },
      transports: [
        snsTransport,
        new this._winston.transports.Console(),
      ],
    });
    return logger;
  }
  /**
  * @return {Object}
  */
  gethttpContext() {
    return this._httpContext.get('requestId');
  }
  /**
  *@return {Object}
  */
  traceHeader() {
    return this._httpContext.get('traceHeaders');
  }
}

module.exports = LoggerService;
" >> LogService.js
cd .. 

mkdir tests
cd tests
echo "const expect = require('chai').expect;
const sinon = require('sinon');
const config = require('../../config/general');

const {spy, stub} = sinon;

const ActivityController =
require('../controllers/defaultController');">> DefaultController.spec.js
cd ..
echo "
const express = require('express');
const swaggerUi = require('swagger-ui-express');
const Winston = require('winston');
const WinstonSNS = require('winston-sns');
const httpContext = require('express-http-context');
const createError = require('http-errors');

const swaggerDocument = require('../docs/v1/swaggerScheme.json');
const config = require('../config/general');
const logLevels = require('./constants/logLevels');

const Logger = require('./services/LogService');
const Default = require('./controllers/defaultController');

const logger = new Logger(Winston, WinstonSNS, config, httpContext, logLevels);
const DefaultService = require('./services/defaultService');
const defaultService = new DefaultService();

const defaultController = new Default(
    logger,
    defaultService
);

// eslint-disable-next-line new-cap
const routes = express.Router();
routes.use('/docs', swaggerUi.serve);
routes.get('/docs', swaggerUi.setup(swaggerDocument));

routes.get('/default',
    defaultController
        .getDefault
        .bind(defaultController));


routes.get('/health', function(req, res, next) {
  return res.status(200).json({status: 'UP'});
});

routes.get('/live', function(req, res, next) {
  return res.status(200).send({message: 'connected'});
});

routes.use(function(err, req, res, next) {
  res.status(err.status || 500).send({message: err.message});
});


module.exports = routes;
">> routes.js
echo "const bodyParser = require('body-parser');
const express = require('express');
const httpContext = require('express-http-context');
const routes = require('./routes');
const cors = require('cors');
const app = express();
const config = require('../config/general');

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));
app.use(httpContext.middleware);
app.use((req, res, next) => {
  const headers = req.headers || {};
  const traceHeaders = {
    'x-request-id': headers['x-request-id'] || '',
    'x-b3-traceid': headers['x-b3-traceid'] || '',
    'x-b3-parentspanid': headers['x-b3-parentspanid'] || '',
    'x-b3-spanid': headers['x-b3-spanid'] || '',
    'x-b3-sampled': headers['x-b3-sampled'] || '',
    'x-b3-flags': headers['x-b3-flags'] || '',
    'x-ot-span-context': headers['x-ot-span-context'] || '',
  };
  httpContext.set('traceHeaders', traceHeaders);
  httpContext.set('requestId', traceHeaders['x-request-id']);
  next();
});
app.use(routes);

app.listen(config.app.PORT, (err) => {
  if (err) {
    console.error(err);
    return process.exit(1);
  }
  console.log(`listening on port: 3000`);
});
">> index.js
cd ..

echo "script finalizado sem erros"